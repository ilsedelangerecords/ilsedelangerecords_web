name: üöÄ Deploy to Production

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: production-deployment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build SPA for deployment
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Check for relevant changes
        id: changes
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force deployment requested"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ Manual deployment triggered"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ PR merged, deploying to production"
          else
            # Check for changes in relevant directories
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              if git diff --name-only HEAD~1 HEAD | grep -E "(src/|public/|scripts/|package.*\.json|vite\.config\.js)" > /dev/null; then
                echo "should-deploy=true" >> $GITHUB_OUTPUT
                echo "‚úÖ Relevant changes detected, deploying"
              else
                echo "should-deploy=false" >> $GITHUB_OUTPUT
                echo "‚ÑπÔ∏è No relevant changes detected, skipping deployment"
              fi
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "‚úÖ First commit or shallow clone, deploying"
            fi
          fi

      - name: üìã Generate version
        id: version
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version: $VERSION"

      - name: üì¶ Setup pnpm
        if: steps.changes.outputs.should-deploy == 'true'
        uses: pnpm/action-setup@v4

      - name: üì¶ Setup Node.js
        if: steps.changes.outputs.should-deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: üì• Install dependencies
        if: steps.changes.outputs.should-deploy == 'true'
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Build SPA for production
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          echo "üèóÔ∏è Building SPA for production deployment..."
          pnpm run build
          
          # Verify build output
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build failed - dist directory or index.html not found"
            exit 1
          fi
          
          echo "‚úÖ SPA built successfully"

      - name: üîß Configure SPA routing and optimization
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          echo "üîß Configuring SPA routing and optimization..."
          # The SPA build already includes .htaccess, but we'll enhance it
          cat > dist/.htaccess << 'EOF'
          # Enable compression
          <IfModule mod_deflate.c>
              AddOutputFilterByType DEFLATE text/plain
              AddOutputFilterByType DEFLATE text/html
              AddOutputFilterByType DEFLATE text/xml
              AddOutputFilterByType DEFLATE text/css
              AddOutputFilterByType DEFLATE application/xml
              AddOutputFilterByType DEFLATE application/xhtml+xml
              AddOutputFilterByType DEFLATE application/rss+xml
              AddOutputFilterByType DEFLATE application/javascript
              AddOutputFilterByType DEFLATE application/x-javascript
              AddOutputFilterByType DEFLATE application/json
          </IfModule>
          
          # Set cache headers
          <IfModule mod_expires.c>
              ExpiresActive On
              ExpiresByType text/css "access plus 1 month"
              ExpiresByType application/javascript "access plus 1 month"
              ExpiresByType text/javascript "access plus 1 month"
              ExpiresByType image/png "access plus 1 year"
              ExpiresByType image/jpg "access plus 1 year"
              ExpiresByType image/jpeg "access plus 1 year"
              ExpiresByType image/gif "access plus 1 year"
              ExpiresByType image/svg+xml "access plus 1 year"
              ExpiresByType application/json "access plus 1 day"
              ExpiresByType text/html "access plus 1 hour"
          </IfModule>
          
          # Security headers
          <IfModule mod_headers.c>
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options DENY
              Header always set X-XSS-Protection "1; mode=block"
              Header always set Referrer-Policy "strict-origin-when-cross-origin"
          </IfModule>
          
          # SPA Routing - Send all requests to index.html for client-side routing
          Options -MultiViews
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteRule ^ index.html [QSA,L]
          EOF
          
          echo "‚úÖ SPA routing and optimization configured"

      - name: üìä Build summary
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          echo "üì¶ SPA build completed successfully!"
          echo "üìÅ Build size: $(du -sh dist/ | cut -f1)"
          echo "üìÑ Files generated: $(find dist/ -type f | wc -l)"
          echo "üîó Main files:"
          echo "  - Homepage: dist/index.html"
          echo "  - Content API: dist/content/"
          
          echo "üéâ Ready for deployment!"

      - name: üì§ Upload build artifacts
        if: steps.changes.outputs.should-deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: spa-build-${{ steps.version.outputs.version }}
          path: dist/
          retention-days: 30

  # Deploy to production server
  deploy:
    needs: build
    if: needs.build.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: üîí Validate SSH secrets
        run: |
          echo "üîç Validating required SSH secrets..."
          
          missing_secrets=""
          
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            missing_secrets="$missing_secrets SSH_HOST"
          fi
          
          if [ -z "${{ secrets.SSH_USER }}" ]; then
            missing_secrets="$missing_secrets SSH_USER"
          fi
          
          if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            missing_secrets="$missing_secrets DEPLOY_SSH_KEY"
          fi
          
          if [ -z "${{ secrets.SSH_TARGET_PATH }}" ]; then
            missing_secrets="$missing_secrets SSH_TARGET_PATH"
          fi
          
          if [ -n "$missing_secrets" ]; then
            echo "‚ùå Missing required secrets: $missing_secrets"
            echo "Please configure these secrets in GitHub Actions settings"
            exit 1
          fi          
          
          echo "‚úÖ All required SSH secrets are configured"

      - name: üì• Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: spa-build-${{ needs.build.outputs.version }}
          path: dist/

      - name: üîê Prepare SSH deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Set SSH port with default
          ssh_port="${{ secrets.SSH_PORT }}"
          if [ -z "$ssh_port" ]; then
            ssh_port="22"
          fi
          
          # Add production server to known hosts
          ssh-keyscan -p "$ssh_port" ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
          echo "‚úÖ SSH key configured for production deployment"

      - name: üöÄ Deploy to production server
        run: |
          echo "üöÄ Deploying SPA to ilsedelangerecords.nl..."
          
          # Set SSH port with default
          ssh_port="${{ secrets.SSH_PORT }}"
          if [ -z "$ssh_port" ]; then
            ssh_port="22"
          fi
          
          # Deploy with rsync for efficient transfer
          rsync -avz --delete --progress \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='*.log' \
            -e "ssh -i ~/.ssh/id_ed25519 -p $ssh_port -o StrictHostKeyChecking=no" \
            dist/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_TARGET_PATH }}
          
          echo "‚úÖ Deployment completed successfully!"

      - name: üóÇÔ∏è List dist/ contents before deploy
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          echo "Listing dist/ contents before deployment:"
          ls -la dist/

      - name: üîÑ Clear server cache (if applicable)
        run: |
          echo "üîÑ Clearing server cache..."
          
          # Set SSH port with default
          ssh_port="${{ secrets.SSH_PORT }}"
          if [ -z "$ssh_port" ]; then
            ssh_port="22"
          fi
          
          # Optional: Clear any server-side cache
          ssh -i ~/.ssh/id_ed25519 -p "$ssh_port" \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            "if command -v php >/dev/null 2>&1; then
               if [ -f '${{ secrets.SSH_TARGET_PATH }}/.htaccess' ]; then
                 echo 'Cache headers configured via .htaccess'
               fi
             fi" || echo "No cache clearing needed"

      - name: üåê Deployment summary
        run: |
          echo "üéâ Deployment to production successful!"
          echo "üîó Production URL: https://ilsedelangerecords.nl/"
          echo "üì¶ Version: ${{ needs.build.outputs.version }}"
          echo "‚è∞ Deployed at: $(date)"
          echo "üìã Deployment type: SPA (Single Page Application)"

      - name: üß™ Post-deployment verification
        run: |
          echo "üîç Verifying production deployment..."
          sleep 20
          
          # Test main site
          if curl -L -f -s --max-time 15 https://ilsedelangerecords.nl/ > /dev/null; then
            echo "‚úÖ Homepage is responding"
          else
            echo "‚ùå Homepage is not responding"
            curl -L -v https://ilsedelangerecords.nl/
            exit 1
          fi
          
          # Test content API
          if curl -L -f -s --max-time 15 https://ilsedelangerecords.nl/content/albums.json > /dev/null; then
            echo "‚úÖ Content API is accessible"
          else
            echo "‚ùå Content API not accessible"
            curl -L -v https://ilsedelangerecords.nl/content/albums.json
            exit 1
          fi
          
          echo "üéâ Verification completed!"

      - name: üóÇÔ∏è List files on server after deploy
        run: |
          ssh_port="${{ secrets.SSH_PORT }}"
          if [ -z "$ssh_port" ]; then
            ssh_port="22"
          fi
          echo "Listing files in ${{ secrets.SSH_TARGET_PATH }} on server:"
          ssh -i ~/.ssh/id_ed25519 -p "$ssh_port" ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "ls -la ${{ secrets.SSH_TARGET_PATH }}"

  # Clean up old artifacts
  cleanup:
    needs: [build, deploy]
    if: always() && needs.build.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: üßπ Clean up old artifacts
        continue-on-error: true
        run: |
          echo "üßπ Cleaning up old deployment artifacts..."
          echo "‚úÖ Cleanup scheduled (automatic after 30 days)"
