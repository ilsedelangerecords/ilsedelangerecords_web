name: 🚀 Deploy to Production

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ closed ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: production-deployment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build static site for maximum performance
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for change detection

      - name: 🔍 Check for relevant changes
        id: changes
        run: |          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🔄 Force deployment requested"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🔄 Manual deployment triggered"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "🔄 PR merged, deploying to production"
          else
            # Check for changes in relevant directories
            # Handle case where there might be only one commit
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              if git diff --name-only HEAD~1 HEAD | grep -E "(src/|public/|scripts/|package.*\.json|vite\.config\.js)" > /dev/null; then
                echo "should-deploy=true" >> $GITHUB_OUTPUT
                echo "✅ Relevant changes detected, deploying"
              else
                echo "should-deploy=false" >> $GITHUB_OUTPUT
                echo "ℹ️ No relevant changes detected, skipping deployment"
              fi
            else
              # First commit or shallow clone, always deploy
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "✅ First commit or shallow clone, deploying"
            fi
          fi

      - name: 📋 Generate version
        id: version
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version: $VERSION"

      - name: 📦 Setup pnpm
        if: steps.changes.outputs.should-deploy == 'true'
        uses: pnpm/action-setup@v4

      - name: 📦 Setup Node.js
        if: steps.changes.outputs.should-deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: 📥 Install dependencies
        if: steps.changes.outputs.should-deploy == 'true'
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Generate static site
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          echo "🏗️ Building static site for maximum performance..."
          pnpm run build:static
          
          # Verify build output
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "❌ Build failed - dist directory or index.html not found"
            exit 1
          fi
          
          echo "✅ Static site generated successfully"

      - name: 🔧 Optimize static files
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          echo "🔧 Optimizing static files..."
            # Add cache headers via .htaccess (for Apache servers)
          cat > dist/.htaccess << 'EOF'
          # Enable compression
          <IfModule mod_deflate.c>
              AddOutputFilterByType DEFLATE text/plain
              AddOutputFilterByType DEFLATE text/html
              AddOutputFilterByType DEFLATE text/xml
              AddOutputFilterByType DEFLATE text/css
              AddOutputFilterByType DEFLATE application/xml
              AddOutputFilterByType DEFLATE application/xhtml+xml
              AddOutputFilterByType DEFLATE application/rss+xml
              AddOutputFilterByType DEFLATE application/javascript
              AddOutputFilterByType DEFLATE application/x-javascript
              AddOutputFilterByType DEFLATE application/json
          </IfModule>
          
          # Set cache headers
          <IfModule mod_expires.c>
              ExpiresActive On
              ExpiresByType text/css "access plus 1 month"
              ExpiresByType application/javascript "access plus 1 month"
              ExpiresByType text/javascript "access plus 1 month"
              ExpiresByType image/png "access plus 1 year"
              ExpiresByType image/jpg "access plus 1 year"
              ExpiresByType image/jpeg "access plus 1 year"
              ExpiresByType image/gif "access plus 1 year"
              ExpiresByType image/svg+xml "access plus 1 year"
              ExpiresByType application/json "access plus 1 day"
              ExpiresByType text/html "access plus 1 hour"
          </IfModule>
          
          # Security headers
          <IfModule mod_headers.c>
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options DENY
              Header always set X-XSS-Protection "1; mode=block"
              Header always set Referrer-Policy "strict-origin-when-cross-origin"
          </IfModule>
          
          # URL Rewriting for Static Site
          RewriteEngine On
          
          # Handle directories - if requesting /albums, serve /albums/index.html
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI}/index.html -f
          RewriteRule ^(.*)$ $1/index.html [L]
          
          # Handle pretty URLs - remove .html extension
          RewriteCond %{REQUEST_FILENAME} !-d
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI}.html -f
          RewriteRule ^([^\.]+)$ $1.html [NC,L]
          
          # Force trailing slash for directories (optional, helps with consistency)
          RewriteCond %{REQUEST_FILENAME} -d
          RewriteCond %{REQUEST_URI} !/$          RewriteRule ^(.*)$ $1/ [R=301,L]
          EOF
          
          echo "✅ Added .htaccess with optimization rules"

      - name: 📊 Build summary
        if: steps.changes.outputs.should-deploy == 'true'
        run: |
          echo "📦 Static site build completed successfully!"
          echo "📁 Build size: $(du -sh dist/ | cut -f1)"
          echo "📄 Files generated: $(find dist/ -type f | wc -l)"
          echo "🔗 Main pages:"
          echo "  - Homepage: dist/index.html"
          echo "  - Albums: dist/albums/index.html"
          find dist/album -name "index.html" | head -5 | sed 's/^/  - /'
          if [ $(find dist/album -name "index.html" | wc -l) -gt 5 ]; then
            echo "  - ... and $(( $(find dist/album -name "index.html" | wc -l) - 5 )) more album pages"
          fi

      - name: 📤 Upload build artifacts
        if: steps.changes.outputs.should-deploy == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: static-site-${{ steps.version.outputs.version }}
          path: dist/
          retention-days: 30

  # Deploy to production server
  deploy:
    needs: build
    if: needs.build.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 🔒 Validate SSH secrets
        run: |
          echo "🔍 Validating required SSH secrets..."
          
          missing_secrets=""
          
          if [ -z "${{ secrets.SSH_HOST }}" ]; then
            missing_secrets="$missing_secrets SSH_HOST"
          fi
          
          if [ -z "${{ secrets.SSH_USER }}" ]; then
            missing_secrets="$missing_secrets SSH_USER"
          fi
          
          if [ -z "${{ secrets.DEPLOY_SSH_KEY }}" ]; then
            missing_secrets="$missing_secrets DEPLOY_SSH_KEY"
          fi
          
          if [ -z "${{ secrets.SSH_TARGET_PATH }}" ]; then
            missing_secrets="$missing_secrets SSH_TARGET_PATH"
          fi
          
          if [ -n "$missing_secrets" ]; then
            echo "❌ Missing required secrets: $missing_secrets"
            echo "Please configure these secrets in GitHub Actions settings"
            exit 1
          fi
          
          echo "✅ All required SSH secrets are configured"

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: static-site-${{ needs.build.outputs.version }}
          path: dist/

      - name: 🔐 Prepare SSH deployment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          
          # Add production server to known hosts
          ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          
          echo "✅ SSH key configured for production deployment"

      - name: 🚀 Deploy to production server
        run: |
          echo "🚀 Deploying static site to ilsedelangerecords.nl..."
          
          # Deploy with rsync for efficient transfer
          rsync -avz --delete --progress \
            --exclude='.git*' \
            --exclude='node_modules' \
            --exclude='*.log' \
            -e "ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.SSH_PORT || '22' }} -o StrictHostKeyChecking=no" \
            dist/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_TARGET_PATH }}
          
          echo "✅ Deployment completed successfully!"

      - name: 🔄 Clear server cache (if applicable)
        run: |
          echo "🔄 Clearing server cache..."
          
          # Optional: Clear any server-side cache
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.SSH_PORT || '22' }} \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
            'if command -v php >/dev/null 2>&1; then
               if [ -f '${{ secrets.SSH_TARGET_PATH }}'/.htaccess ]; then
                 echo "Cache headers configured via .htaccess"
               fi
             fi' || echo "No cache clearing needed"

      - name: 🌐 Deployment summary
        run: |
          echo "🎉 Deployment to production successful!"
          echo "🔗 Production URL: https://ilsedelangerecords.nl/"
          echo "📦 Version: ${{ needs.build.outputs.version }}"
          echo "⏰ Deployed at: $(date)"
          echo "📋 Deployment type: Static HTML files (optimized for speed)"

      - name: 🧪 Post-deployment verification
        run: |
          echo "🔍 Verifying production deployment..."
          sleep 10
          
          # Test main site
          if curl -f -s --max-time 10 https://ilsedelangerecords.nl/ > /dev/null; then
            echo "✅ Homepage is responding"
          else
            echo "❌ Homepage is not responding"
            exit 1
          fi
          
          # Test albums page
          if curl -f -s --max-time 10 https://ilsedelangerecords.nl/albums > /dev/null; then
            echo "✅ Albums page is accessible"
          else
            echo "⚠️ Albums page may not be accessible (could be normal for static sites)"
          fi
          
          # Test content API
          if curl -f -s --max-time 10 https://ilsedelangerecords.nl/content/albums.json > /dev/null; then
            echo "✅ Content API is accessible"
          else
            echo "❌ Content API not accessible"
            exit 1
          fi
          
          # Test specific album page
          if curl -f -s --max-time 10 https://ilsedelangerecords.nl/album/ > /dev/null; then
            echo "✅ Album pages are accessible"
          else
            echo "⚠️ Album pages may not be accessible (could be normal depending on URL structure)"
          fi
          
          echo "🎉 Verification completed!"

  # Clean up old artifacts
  cleanup:
    needs: [build, deploy]
    if: always() && needs.build.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 🧹 Clean up old artifacts
        continue-on-error: true
        run: |
          echo "🧹 Cleaning up old deployment artifacts..."
          # Artifacts are automatically cleaned up after retention period
          echo "✅ Cleanup scheduled (automatic after 30 days)"
