name: üöÄ Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

concurrency:
  group: production-deployment
  cancel-in-progress: false

jobs:
  # Pre-deployment checks
  pre-deploy-checks:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to ensure all files are present

      - name: üîç Check for relevant changes
        id: changes
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force deployment requested"
          else
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Deploying to ensure staging is up to date"
          fi

      - name: üìã Generate version
        id: version
        run: |
          VERSION=$(date +%Y%m%d-%H%M%S)-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version: $VERSION"

  # Build and test
  build:
    needs: pre-deploy-checks
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to ensure all files are present

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Build application
        run: pnpm run build

      - name: üîç List dist directory contents
        run: ls -R dist/

      - name: ‚úÖ Validate content files exist
        run: |
          echo "üîç Checking content files..."
          if [ -f "dist/content/albums.json" ]; then
            ALBUM_COUNT=$(cat dist/content/albums.json | jq 'length // (. | keys | length)')
            echo "üìÄ Albums found: $ALBUM_COUNT"
          else
            echo "‚ùå albums.json not found in dist/content"
            exit 1
          fi
          if [ -f "dist/content/lyrics.json" ]; then
            LYRICS_COUNT=$(cat dist/content/lyrics.json | jq 'length // (. | keys | length)')
            echo "üéµ Lyrics found: $LYRICS_COUNT"
          else
            echo "‚ùå lyrics.json not found in dist/content"
            exit 1
          fi
          if [ -f "dist/content/artists.json" ]; then
            ARTISTS_COUNT=$(cat dist/content/artists.json | jq 'length // (. | keys | length)')
            echo "üë§ Artists found: $ARTISTS_COUNT"
          else
            echo "‚ùå artists.json not found in dist/content"
            exit 1
          fi

      - name: ‚úÖ Verify build output
        run: |
          echo "üì¶ Build completed successfully!"
          echo "üìÅ Build size:"
          du -sh dist/
          echo "üìÑ Files generated:"
          find dist/ -type f | wc -l
          echo "üîç Checking critical files:"
          ls -la dist/index.html
          ls -la dist/content/ || echo "‚ö†Ô∏è No content directory in build"
          ls -la dist/images/ || echo "‚ö†Ô∏è No images directory in build"
          ls -la dist/favicon.ico || echo "‚ö†Ô∏è No favicon in build"

      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ needs.pre-deploy-checks.outputs.version }}
          path: dist/
          retention-days: 30

  # Deploy to staging
  deploy:
    needs: [pre-deploy-checks, build]
    if: needs.pre-deploy-checks.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to ensure all files are present

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: üì• Install dependencies
        run: pnpm install --frozen-lockfile

      - name: üèóÔ∏è Build for production
        run: pnpm run build

      - name: üîê Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -p ${{ secrets.SSH_PORT || '22' }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: üöÄ Deploy via rsync
        run: |
          echo "üöÄ Deploying to staging server..."
          echo "üìä Pre-deployment verification:"
          ls -la dist/
          echo "üìÅ Content files:"
          ls -la dist/content/ || echo "No content directory"
          echo "üñºÔ∏è Image files:"
          ls -la dist/images/ | head -5 || echo "No images directory"
          
          echo "üîÑ Starting rsync deployment..."
          rsync -avz --delete --progress \
            -e "ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.SSH_PORT || '22' }}" \
            dist/ \
            ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_TARGET_PATH }}
          echo "‚úÖ Deployment completed!"

      - name: üåê Deployment summary
        run: |
          echo "üéâ Deployment successful!"
          echo "üîó Staging URL: https://staging.ilsedelangerecords.nl/"
          echo "üì¶ Version: ${{ needs.pre-deploy-checks.outputs.version }}"
          echo "‚è∞ Deployed at: $(date)"

      - name: üß™ Post-deployment verification
        run: |
          echo "üîç Verifying deployment..."
          sleep 15
          echo "üåê Testing staging site..."
          if curl -f -s https://staging.ilsedelangerecords.nl/ > /dev/null; then
            echo "‚úÖ Staging site is responding"
          else
            echo "‚ö†Ô∏è Staging site may not be ready yet"
          fi
          
          echo "üìä Testing content files..."
          if curl -f -s https://staging.ilsedelangerecords.nl/content/albums.json > /dev/null; then
            echo "‚úÖ Albums content is accessible"
          else
            echo "‚ö†Ô∏è Albums content not accessible"
          fi


